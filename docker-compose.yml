version: '3.9'

services:
  rabbitmq-container:
    image: rabbitmq:3.11-management
    hostname: rabbitmq-container
    ports:
      - '15672:15672'
      - '5672:5672'
    networks:
      - internal

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '5173:5173'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - internal

  product-db:
    image: postgres:12
    container_name: product-db
    ports:
      - '5432:5432'
    volumes:
      - product-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: product-db
      POSTGRES_PASSWORD: product-db
      POSTGRES_DB: product-db
    networks:
      - internal

  product-service:
    container_name: product-service
    command: java -jar target/demo-0.0.1-SNAPSHOT.jar
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    depends_on:
      - product-db
      - rabbitmq-container
    volumes:
      - .:/product-service/app
    links:
      - product-db
    networks:
      - internal
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product-db:5432/product-db
      - spring_rabbitmq_host=rabbitmq-container
      - spring_rabbitmq_port=5672

  notification-db:
    image: postgres:12
    container_name: notification-db
    ports:
      - '5433:5432'
    volumes:
      - notification-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: notification-db
      POSTGRES_PASSWORD: notification-db
      POSTGRES_DB: notification-db
    networks:
      - internal

  notification-service:
    container_name: notification-service
    command: java -jar target/demo-0.0.1-SNAPSHOT.jar
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - '8081:8080'
    depends_on:
      - notification-db
      - rabbitmq-container
    volumes:
      - .:/notification-service/app
    links:
      - notification-db
    networks:
      - internal
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://notification-db:5432/notification-db
      - spring_rabbitmq_host=rabbitmq-container
      - spring_rabbitmq_port=5672

  cart-db:
    image: postgres:12
    container_name: cart-db
    ports:
      - '5434:5432'
    volumes:
      - cart-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: cart-db
      POSTGRES_PASSWORD: cart-db
      POSTGRES_DB: cart-db
    networks:
      - internal

  cart-service:
    container_name: cart-service
    command: java -jar target/demo-0.0.1-SNAPSHOT.jar
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    ports:
      - '8082:8080'
    depends_on:
      - cart-db
      - rabbitmq-container
    volumes:
      - .:/cart-service/app
    links:
      - cart-db
    networks:
      - internal
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://cart-db:5432/cart-db
      - spring_rabbitmq_host=rabbitmq-container
      - spring_rabbitmq_port=5672

  checkout-db:
    image: postgres:12
    container_name: checkout-db
    ports:
      - '5436:5432'
    volumes:
      - checkout-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: checkout-db
      POSTGRES_PASSWORD: checkout-db
      POSTGRES_DB: checkout-db
    networks:
      - internal

  checkout-service:
    container_name: checkout-service
    command: java -jar target/demo-0.0.1-SNAPSHOT.jar
    build:
      context: ./checkout-service
      dockerfile: Dockerfile
    ports:
      - '8083:8080'
    depends_on:
      - rabbitmq-container
    volumes:
      - .:/checkout-service/app
    networks:
      - internal
    environment:
      - spring_rabbitmq_host=rabbitmq-container
      - spring_rabbitmq_port=5672

  keycloak-db:
    image: postgres:12
    container_name: keycloak-db
    ports:
      - '5435:5432'
    volumes:
      - keycloak-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: keycloak-db
      POSTGRES_USER: keycloak-db
      POSTGRES_PASSWORD: keycloak-db
    networks:
      - internal

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:legacy
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-db
      DB_DATABASE: keycloak-db
      DB_USER: keycloak-db
      DB_SCHEMA: public
      DB_PASSWORD: keycloak-db
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - '8090:8080'
    links:
      - keycloak-db
    depends_on:
      - keycloak-db
      - rabbitmq-container
    networks:
      - internal

networks:
  internal:
    name: internal

volumes:
  product-data:
  notification-data:
  keycloak-data:
  cart-data: